library(G2Sd)
?granstat
data(granulo)
granplot(granulo,1)
granplot(granulo,1,hist=F)
granplot(granulo,1,hist=T,cum=F)
granplot(granulo,c(1:5),hist=T,cum=F)
granplot <-
function(x,xc=1,meshmin=10,hist=TRUE,cum=TRUE,main="",col.cum="red",
col.hist="darkgray",cexname=0.9,cexlab=1.3,decreasing=FALSE)
{
x <- x[order(as.numeric(row.names(x)),decreasing=decreasing),]
#     x <- as.data.frame(x)
um <- as.numeric(row.names(x))
if (!is.na(pmatch(0,um)) ) um[pmatch(0,um)]=meshmin
if (length(xc)==1)
{
sum.sieve = sum(x[, xc])
class.weight = (x[, xc] * 100)/sum.sieve
class.weight.cum = round(cumsum(class.weight),2)
weight.gran <- data.frame(um=um,weight=class.weight,
weight.cum=class.weight.cum)
hist.cum.plot <- ggplot(weight.gran)+
theme(panel.background = element_blank(),
panel.grid = element_line(colour="gray"),
axis.title=element_text(size = rel(1.2),face="bold"),
axis.text=element_text(size = rel(1.1),colour="black"),
strip.text.x = element_text(size = rel(1.0), face = "bold"),
axis.ticks=element_line(colour="black"),
axis.line=element_line(colour="black"))+
labs(title=names(granulo)[xc])
if (hist == TRUE & cum == TRUE) {
if (decreasing)
{
hist.cum.plot <- hist.cum.plot+
geom_bar(aes(x=um,y=weight),stat="identity",fill=col.hist)+
geom_line(aes(x=um,y=weight.cum),colour=col.cum,size=1.5)+
ylab("Weight (%)")+xlab( expression(log[10](Particule~size)))+
scale_y_continuous(sec.axis = sec_axis(~.*1, name = "Percentage cum.(%)"))+
scale_x_continuous(trans=.reverselog_trans(10))
} else {
hist.cum.plot <- hist.cum.plot+
geom_bar(aes(x=um,y=weight),stat="identity",fill=col.hist)+
geom_line(aes(x=um,y=weight.cum),colour=col.cum,size=1.5)+
ylab("Weight (%)")+xlab( expression(log[10](Particule~size)))+
scale_y_continuous(sec.axis = sec_axis(~.*1, name = "Percentage cum.(%)"))+
scale_x_log10()}
print(hist.cum.plot)
}
if (hist == FALSE & cum == TRUE) {
if (decreasing)
{
hist.cum.plot <- hist.cum.plot+
geom_line(aes(x=um,y=weight.cum),colour=col.cum,size=1.5)+
ylab("Percentage cum.(%)")+xlab( expression(log[10](Particule~size)))+
scale_x_continuous(trans=.reverselog_trans(10))
} else {
hist.cum.plot <- hist.cum.plot+
geom_line(aes(x=um,y=weight.cum),colour=col.cum,size=1.5)+
ylab("Percentage cum.(%)")+xlab( expression(log[10](Particule~size)))+
scale_x_log10()}
print(hist.cum.plot)
}
if (hist == TRUE & cum == FALSE) {
if (decreasing)
{
hist.cum.plot <- hist.cum.plot+
geom_bar(aes(x=um,y=weight),stat="identity",fill=col.hist)+
ylab("Weight (%)")+xlab( expression(log[10](Particule~size)))+
scale_x_continuous(trans=.reverselog_trans(10))
} else {
hist.cum.plot <- hist.cum.plot+
geom_bar(aes(x=um,y=weight),stat="identity",fill=col.hist)+
ylab("Weight (%)")+xlab( expression(log[10](Particule~size)))+
scale_x_log10()}
print(hist.cum.plot)
}
}
if (length(xc)!=1)
{
class.weight = sapply( x[,xc], function(x){ (x/sum(x, na.rm=TRUE))*100})
class.weight.cum = as.data.frame(round(apply(class.weight,2,cumsum),2));row.names(class.weight.cum) <- row.names(x)
class.weight.cum <- melt(t(class.weight.cum ),id=names(t(class.weight.cum )))
names(class.weight.cum) <- c("var","gsize","value")
p <- ggplot(class.weight.cum,aes_string(x="gsize",y="value",shape="var",col="var"))+geom_line(size=2)+
theme_bw()+labs(x="Particule size (microns)", y="Percentage cum.(%)",title=main)+
theme( plot.title = element_text(size = rel(1.5), colour = "black",face="bold"),
axis.title.y = element_text(size = rel(1.3), face = "bold"),
axis.title.x = element_text(size = rel(1.3), face = "bold"),
axis.text.y = element_text(size = rel(1.1), face = "bold"),
axis.text.x = element_text(size = rel(1.1),face="bold"))+scale_colour_hue("Stations")+
scale_x_log10()
print(p)
}
}
granplot(granulo,c(1:5),hist=T,cum=F)
library(G2Sd)
granplot(granulo,c(1:5),hist=T,cum=F)
library(G2Sd)
granplot(granulo,c(1:5),hist=T,cum=F)
library(G2Sd)
data(granulo)
granstat(granulo)
write.csv(granulo,"granulo.csv",row.names = F)
View(granulo)
write.csv(granulo,"granulo.csv",row.names = T)
granstat(granulo[,1])
granstat(granulo[,1])
granstat(granulo[,1])
x <- granulo
.grancompat <-
function(x)
{
x <- as.data.frame(x)
n.sieve <- nrow(x)
n.sample <- ncol(x)
if (any(as.matrix(x) < 0))
stop("negative entries in dataframe.",call. = FALSE)
if (any(as.matrix(x) > 300))
warning("Some high values are present.", call. = FALSE,immediate.=TRUE)
if (any(apply(x,2,sum)==0))
stop("Some column sums equal to zero",call. = FALSE)
else {return(x)}
}
x <- .grancompat(x)
if(any(as.numeric(row.names(x))==0))
meshmin <- 0.000160 else meshmin <- min(as.numeric(row.names(x)))
if (sum(as.numeric(row.names(x)))>45)
{
um <- as.numeric(row.names(x))
phi=rep(0,length(um))
for (i in 1:length(um))
if (um[i]!=0) phi[i]=-log2(um[i]/1000) else phi[i]=-log2(meshmin/1000)
}
if (sum(as.numeric(row.names(x)))<=45)
{
phi=as.numeric(row.names(x))
um=rep(0,length(phi))
for (i in 1:length(phi)) um[i]=(1/2^phi[i])*1000
}
um
phi
.percentile <-
function(x,phi,um,decreasing){
all <- data.frame(x,phi,um)
all <- all[order(as.numeric(all$um),decreasing=decreasing),]
all <- all[all[,1]!=0,]
x <- as.numeric(all[,1])
sum.sieve=sum(x)
class.weight=(x*100)/sum.sieve
cum.sum=as.numeric(cumsum(class.weight))
D=c(10,16,25,50,75,84,90,95)
minimum.cumsum <- min(cum.sum)
if (any(D< minimum.cumsum))
{
warning(paste0(paste0("D",D[D< minimum.cumsum],collapse=", ")," can't be calculated"), call. = FALSE,immediate.=TRUE)
class.weight.PHI=cbind(cum.sum,all$phi,all$um)
mat.D=data.frame(matrix(ncol=2,nrow=length(D)))
row.names(mat.D)=D
names(mat.D)=c("Phi","um")
nbclass <- which(D> minimum.cumsum,arr.ind=TRUE)
}
if (all(D> minimum.cumsum))
{
class.weight.PHI=cbind(cum.sum,all$phi,all$um)
mat.D=data.frame(matrix(ncol=2,nrow=length(D)))
row.names(mat.D)=D
names(mat.D)=c("Phi","um")
nbclass <- 1:length(D)
}
for (i in nbclass)
{
greaterpercent <-  class.weight.PHI[class.weight.PHI[,1]>D[i],]
if (is.null(dim(greaterpercent)))
{
greaterpercent <- as.data.frame(t(greaterpercent))
names(greaterpercent) <- c("cum.sum","phi","um")
}
greaterphi=greaterpercent[greaterpercent[,1]==min(greaterpercent[,1]),-1]
greaterphi=as.numeric(greaterphi[greaterphi[2]==min(greaterphi[2])][1])
greaterpercent=min(greaterpercent[,1])
lesspercent=class.weight.PHI[class.weight.PHI[,1]<D[i],]
if (is.null(dim(lesspercent)))
{
lesspercent <- as.data.frame(t(lesspercent))
names(lesspercent) <- c("cum.sum","phi","um")
}
lessphi=lesspercent[lesspercent[,1]==max(lesspercent[,1]),-1]
lessphi=as.numeric(lesspercent[lessphi[2]==min(lessphi[2])][1])
lesspercent=max(lesspercent[,1])
ifelse  (dim(class.weight.PHI[class.weight.PHI[,1]==D[i],])[1]==0,
{ratio1=(D[i]-lesspercent)/(greaterpercent-lesspercent)
ratio2=(greaterphi-lessphi)*ratio1
phi=lessphi+ratio2
um=1/(2^phi*100)},
{phi=as.numeric(subset(class.weight.PHI,class.weight.PHI[,1]==D[i],2))
um=as.numeric(subset(class.weight.PHI,class.weight.PHI[,1]==D[i],3))})
result=c(phi,um)
mat.D[i,]=result
}
return(mat.D)
}
all <- data.frame(x,phi,um)
all
decreasing=T
all <- all[order(as.numeric(all$um),decreasing=decreasing),]
all
all <- all[all[,1]!=0,]
all
x.bck <- x
x <- as.numeric(all[,1])
sum.sieve=sum(x)
class.weight=(x*100)/sum.sieve
cum.sum=as.numeric(cumsum(class.weight))
cum.sum
D=c(10,16,25,50,75,84,90,95)
minimum.cumsum <- min(cum.sum)
if (any(D< minimum.cumsum))
{
warning(paste0(paste0("D",D[D< minimum.cumsum],collapse=", ")," can't be calculated"), call. = FALSE,immediate.=TRUE)
class.weight.PHI=cbind(cum.sum,all$phi,all$um)
mat.D=data.frame(matrix(ncol=2,nrow=length(D)))
row.names(mat.D)=D
names(mat.D)=c("Phi","um")
nbclass <- which(D> minimum.cumsum,arr.ind=TRUE)
}
if (all(D> minimum.cumsum))
{
class.weight.PHI=cbind(cum.sum,all$phi,all$um)
mat.D=data.frame(matrix(ncol=2,nrow=length(D)))
row.names(mat.D)=D
names(mat.D)=c("Phi","um")
nbclass <- 1:length(D)
}
nbclass
D[i]
i=1
greaterpercent <-  class.weight.PHI[class.weight.PHI[,1]>D[i],]
greaterpercent
greaterpercent <-  class.weight.PHI[class.weight.PHI[,1]>D[i],]
if (is.null(dim(greaterpercent)))
{
greaterpercent <- as.data.frame(t(greaterpercent))
names(greaterpercent) <- c("cum.sum","phi","um")
}
greaterphi=greaterpercent[greaterpercent[,1]==min(greaterpercent[,1]),-1]
greaterphi=as.numeric(greaterphi[greaterphi[2]==min(greaterphi[2])][1])
greaterpercent=min(greaterpercent[,1])
lesspercent=class.weight.PHI[class.weight.PHI[,1]<D[i],]
if (is.null(dim(lesspercent)))
{
lesspercent <- as.data.frame(t(lesspercent))
names(lesspercent) <- c("cum.sum","phi","um")
}
lessphi=lesspercent[lesspercent[,1]==max(lesspercent[,1]),-1]
lessphi=as.numeric(lesspercent[lessphi[2]==min(lessphi[2])][1])
lesspercent=max(lesspercent[,1])
ratio1=(D[i]-lesspercent)/(greaterpercent-lesspercent)
ratio2=(greaterphi-lessphi)*ratio1
phi=lessphi+ratio2
um=1/(2^phi*100)
um=1/(2^phi)*100
ifelse  (dim(class.weight.PHI[class.weight.PHI[,1]==D[i],])[1]==0,
{ratio1=(D[i]-lesspercent)/(greaterpercent-lesspercent)
ratio2=(greaterphi-lessphi)*ratio1
phi=lessphi+ratio2
um=1/(2^phi)*1000},
{phi=as.numeric(subset(class.weight.PHI,class.weight.PHI[,1]==D[i],2))
um=as.numeric(subset(class.weight.PHI,class.weight.PHI[,1]==D[i],3))})
for (i in nbclass)
{
greaterpercent <-  class.weight.PHI[class.weight.PHI[,1]>D[i],]
if (is.null(dim(greaterpercent)))
{
greaterpercent <- as.data.frame(t(greaterpercent))
names(greaterpercent) <- c("cum.sum","phi","um")
}
greaterphi=greaterpercent[greaterpercent[,1]==min(greaterpercent[,1]),-1]
greaterphi=as.numeric(greaterphi[greaterphi[2]==min(greaterphi[2])][1])
greaterpercent=min(greaterpercent[,1])
lesspercent=class.weight.PHI[class.weight.PHI[,1]<D[i],]
if (is.null(dim(lesspercent)))
{
lesspercent <- as.data.frame(t(lesspercent))
names(lesspercent) <- c("cum.sum","phi","um")
}
lessphi=lesspercent[lesspercent[,1]==max(lesspercent[,1]),-1]
lessphi=as.numeric(lesspercent[lessphi[2]==min(lessphi[2])][1])
lesspercent=max(lesspercent[,1])
ifelse  (dim(class.weight.PHI[class.weight.PHI[,1]==D[i],])[1]==0,
{ratio1=(D[i]-lesspercent)/(greaterpercent-lesspercent)
ratio2=(greaterphi-lessphi)*ratio1
phi=lessphi+ratio2
um=1/(2^phi)*1000},
{phi=as.numeric(subset(class.weight.PHI,class.weight.PHI[,1]==D[i],2))
um=as.numeric(subset(class.weight.PHI,class.weight.PHI[,1]==D[i],3))})
result=c(phi,um)
mat.D[i,]=result
}
return(mat.D)
mat.D
decreasing=F
x<-x.bck
if (sum(as.numeric(row.names(x)))>45)
{
um <- as.numeric(row.names(x))
phi=rep(0,length(um))
for (i in 1:length(um))
if (um[i]!=0) phi[i]=-log2(um[i]/1000) else phi[i]=-log2(meshmin/1000)
}
if (sum(as.numeric(row.names(x)))<=45)
{
phi=as.numeric(row.names(x))
um=rep(0,length(phi))
for (i in 1:length(phi)) um[i]=(1/2^phi[i])*1000
}
all <- data.frame(x,phi,um)
all <- all[order(as.numeric(all$um),decreasing=decreasing),]
all
all <- all[all[,1]!=0,]
x <- as.numeric(all[,1])
sum.sieve=sum(x)
class.weight=(x*100)/sum.sieve
cum.sum=as.numeric(cumsum(class.weight))
cum.sum
decreasing=T
all <- data.frame(x,phi,um)
x<-x.bck
if (sum(as.numeric(row.names(x)))>45)
{
um <- as.numeric(row.names(x))
phi=rep(0,length(um))
for (i in 1:length(um))
if (um[i]!=0) phi[i]=-log2(um[i]/1000) else phi[i]=-log2(meshmin/1000)
}
if (sum(as.numeric(row.names(x)))<=45)
{
phi=as.numeric(row.names(x))
um=rep(0,length(phi))
for (i in 1:length(phi)) um[i]=(1/2^phi[i])*1000
}
all <- data.frame(x,phi,um)
all <- all[order(as.numeric(all$um),decreasing=decreasing),]
all <- all[all[,1]!=0,]
x <- as.numeric(all[,1])
sum.sieve=sum(x)
class.weight=(x*100)/sum.sieve
cum.sum=as.numeric(cumsum(class.weight))
quantile(x)
quantile(x,c(0.1,0.16,0.25,0.5,0.75,0.84,0.9,0.95))
quantile(cum.sum,c(0.1,0.16,0.25,0.5,0.75,0.84,0.9,0.95))
quantile(x,c(0.1,0.16,0.25,0.5,0.75,0.84,0.9,0.95))
quantile(class.weight,c(0.1,0.16,0.25,0.5,0.75,0.84,0.9,0.95))
library(G2Sd)
granstat(granulo[,1])
x <- granulo
x <- as.data.frame(x)
n.sieve <- nrow(x)
n.sample <- ncol(x)
if (any(as.matrix(x) < 0))
stop("negative entries in dataframe.",call. = FALSE)
if (any(as.matrix(x) > 300))
warning("Some high values are present.", call. = FALSE,immediate.=TRUE)
if (any(apply(x,2,sum)==0))
stop("Some column sums equal to zero",call. = FALSE)
else {return(x)}
if (sum(as.numeric(row.names(x)))>45)
{
um <- as.numeric(row.names(x))
phi=rep(0,length(um))
for (i in 1:length(um))
if (um[i]!=0) phi[i]=-log2(um[i]/1000) else phi[i]=-log2(meshmin/1000)
}
if (sum(as.numeric(row.names(x)))<=45)
{
phi=as.numeric(row.names(x))
um=rep(0,length(phi))
for (i in 1:length(phi)) um[i]=(1/2^phi[i])*1000
}
all <- data.frame(x,phi,um)
all <- all[order(as.numeric(all$um),decreasing=decreasing),]
all <- all[all[,1]!=0,]
x <- as.numeric(all[,1])
sum.sieve=sum(x)
class.weight=(x*100)/sum.sieve
cum.sum=as.numeric(cumsum(class.weight))
D=c(10,16,25,50,75,84,90,95)
minimum.cumsum <- min(cum.sum)
if (any(D< minimum.cumsum))
{
warning(paste0(paste0("D",D[D< minimum.cumsum],collapse=", ")," can't be calculated"), call. = FALSE,immediate.=TRUE)
class.weight.PHI=cbind(cum.sum,all$phi,all$um)
mat.D=data.frame(matrix(ncol=2,nrow=length(D)))
row.names(mat.D)=D
names(mat.D)=c("Phi","um")
nbclass <- which(D> minimum.cumsum,arr.ind=TRUE)
}
if (all(D> minimum.cumsum))
{
class.weight.PHI=cbind(cum.sum,all$phi,all$um)
mat.D=data.frame(matrix(ncol=2,nrow=length(D)))
row.names(mat.D)=D
names(mat.D)=c("Phi","um")
nbclass <- 1:length(D)
}
for (i in nbclass)
{
greaterpercent <-  class.weight.PHI[class.weight.PHI[,1]>D[i],]
if (is.null(dim(greaterpercent)))
{
greaterpercent <- as.data.frame(t(greaterpercent))
names(greaterpercent) <- c("cum.sum","phi","um")
}
greaterphi=greaterpercent[greaterpercent[,1]==min(greaterpercent[,1]),-1]
greaterphi=as.numeric(greaterphi[greaterphi[2]==min(greaterphi[2])][1])
greaterpercent=min(greaterpercent[,1])
lesspercent=class.weight.PHI[class.weight.PHI[,1]<D[i],]
if (is.null(dim(lesspercent)))
{
lesspercent <- as.data.frame(t(lesspercent))
names(lesspercent) <- c("cum.sum","phi","um")
}
lessphi=lesspercent[lesspercent[,1]==max(lesspercent[,1]),-1]
lessphi=as.numeric(lesspercent[lessphi[2]==min(lessphi[2])][1])
lesspercent=max(lesspercent[,1])
ifelse  (dim(class.weight.PHI[class.weight.PHI[,1]==D[i],])[1]==0,
{ratio1=(D[i]-lesspercent)/(greaterpercent-lesspercent)
ratio2=(greaterphi-lessphi)*ratio1
phi=lessphi+ratio2
um=1/(2^phi)*1000},
{phi=as.numeric(subset(class.weight.PHI,class.weight.PHI[,1]==D[i],2))
um=as.numeric(subset(class.weight.PHI,class.weight.PHI[,1]==D[i],3))})
result=c(phi,um)
mat.D[i,]=result
}
decreasing=T
all <- data.frame(x,phi,um)
all <- all[order(as.numeric(all$um),decreasing=decreasing),]
all <- all[all[,1]!=0,]
x <- as.numeric(all[,1])
sum.sieve=sum(x)
class.weight=(x*100)/sum.sieve
cum.sum=as.numeric(cumsum(class.weight))
D=c(10,16,25,50,75,84,90,95)
minimum.cumsum <- min(cum.sum)
if (any(D< minimum.cumsum))
{
warning(paste0(paste0("D",D[D< minimum.cumsum],collapse=", ")," can't be calculated"), call. = FALSE,immediate.=TRUE)
class.weight.PHI=cbind(cum.sum,all$phi,all$um)
mat.D=data.frame(matrix(ncol=2,nrow=length(D)))
row.names(mat.D)=D
names(mat.D)=c("Phi","um")
nbclass <- which(D> minimum.cumsum,arr.ind=TRUE)
}
if (all(D> minimum.cumsum))
{
class.weight.PHI=cbind(cum.sum,all$phi,all$um)
mat.D=data.frame(matrix(ncol=2,nrow=length(D)))
row.names(mat.D)=D
names(mat.D)=c("Phi","um")
nbclass <- 1:length(D)
}
for (i in nbclass)
{
greaterpercent <-  class.weight.PHI[class.weight.PHI[,1]>D[i],]
if (is.null(dim(greaterpercent)))
{
greaterpercent <- as.data.frame(t(greaterpercent))
names(greaterpercent) <- c("cum.sum","phi","um")
}
greaterphi=greaterpercent[greaterpercent[,1]==min(greaterpercent[,1]),-1]
greaterphi=as.numeric(greaterphi[greaterphi[2]==min(greaterphi[2])][1])
greaterpercent=min(greaterpercent[,1])
lesspercent=class.weight.PHI[class.weight.PHI[,1]<D[i],]
if (is.null(dim(lesspercent)))
{
lesspercent <- as.data.frame(t(lesspercent))
names(lesspercent) <- c("cum.sum","phi","um")
}
lessphi=lesspercent[lesspercent[,1]==max(lesspercent[,1]),-1]
lessphi=as.numeric(lesspercent[lessphi[2]==min(lessphi[2])][1])
lesspercent=max(lesspercent[,1])
ifelse  (dim(class.weight.PHI[class.weight.PHI[,1]==D[i],])[1]==0,
{ratio1=(D[i]-lesspercent)/(greaterpercent-lesspercent)
ratio2=(greaterphi-lessphi)*ratio1
phi=lessphi+ratio2
um=1/(2^phi)*1000},
{phi=as.numeric(subset(class.weight.PHI,class.weight.PHI[,1]==D[i],2))
um=as.numeric(subset(class.weight.PHI,class.weight.PHI[,1]==D[i],3))})
result=c(phi,um)
mat.D[i,]=result
}
mat.D
